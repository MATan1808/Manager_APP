// const { poolPromise, sql } = require("../connectDB");

// // L·∫•y danh s√°ch giao d·ªãch
// const getTransactions = async(req, res) => {
//     try {
//         const pool = await poolPromise;
//         const result = await pool.request().query(`
//             SELECT transaction_id, user_id, type, amount, description, 
//                    CONVERT(VARCHAR, created_at, 120) AS created_at 
//             FROM transactions 
//             ORDER BY created_at DESC
//         `);
//         res.json(result.recordset);
//     } catch (err) {
//         res.status(500).json({ error: "L·ªói l·∫•y danh s√°ch giao d·ªãch: " + err.message });
//     }
// };

// // Th√™m giao d·ªãch m·ªõi
// const addTransaction = async(req, res) => {
//     const { user_id, type, amount, description } = req.body;
//     try {
//         const pool = await poolPromise;

//         // Ki·ªÉm tra xem b·∫£ng transactions c√≥ c·ªôt created_at kh√¥ng
//         const columnCheck = await pool.request().query(`
//             SELECT COLUMN_NAME 
//             FROM INFORMATION_SCHEMA.COLUMNS 
//             WHERE TABLE_NAME = 'transactions' AND COLUMN_NAME = 'created_at'
//         `);

//         // N·∫øu c·ªôt 'created_at' kh√¥ng t·ªìn t·∫°i, th√™m v√†o
//         if (columnCheck.recordset.length === 0) {
//             await pool.request().query(`
//                 ALTER TABLE transactions ADD created_at DATETIME DEFAULT GETDATE()
//             `);
//             console.log("‚úÖ C·ªôt 'created_at' ƒë√£ ƒë∆∞·ª£c th√™m v√†o b·∫£ng transactions.");
//         }

//         // Th√™m giao d·ªãch v√†o database
//         await pool.request()
//             .input("user_id", sql.Int, user_id)
//             .input("type", sql.VarChar, type)
//             .input("amount", sql.Money, amount)
//             .input("description", sql.NVarChar, description)
//             .query(`
//                 INSERT INTO transactions (user_id, type, amount, description, created_at)
//                 VALUES (@user_id, @type, @amount, @description, GETDATE())
//             `);

//         res.json({ message: "‚úÖ Giao d·ªãch ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng!" });
//     } catch (err) {
//         res.status(500).json({ error: "L·ªói th√™m giao d·ªãch: " + err.message });
//     }
// };

// // T·∫°o giao d·ªãch m·ªõi
// // üìå T·∫°o giao d·ªãch
// const createTransaction = async(req, res) => {
//     try {
//         const { user_id, amount, type } = req.body; // üëà L·∫•y d·ªØ li·ªáu t·ª´ body

//         // Ki·ªÉm tra ƒë·∫ßu v√†o
//         if (!user_id || !amount || !type) {
//             return res.status(400).json({ error: "Thi·∫øu d·ªØ li·ªáu ƒë·∫ßu v√†o" });
//         }

//         const pool = await poolPromise;

//         // Ki·ªÉm tra t√†i kho·∫£n c√≥ t·ªìn t·∫°i kh√¥ng
//         const checkUser = await pool.request()
//             .input("user_id", sql.Int, user_id)
//             .query("SELECT * FROM accounts WHERE user_id = @user_id");

//         if (checkUser.recordset.length === 0) {
//             return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n" });
//         }

//         // C·∫≠p nh·∫≠t s·ªë d∆∞ n·∫øu l√† `deposit` ho·∫∑c `withdraw`
//         let newBalance = checkUser.recordset[0].balance;
//         if (type === "deposit") {
//             newBalance += amount;
//         } else if (type === "withdraw") {
//             if (newBalance < amount) {
//                 return res.status(400).json({ error: "S·ªë d∆∞ kh√¥ng ƒë·ªß ƒë·ªÉ r√∫t" });
//             }
//             newBalance -= amount;
//         } else {
//             return res.status(400).json({ error: "Lo·∫°i giao d·ªãch kh√¥ng h·ª£p l·ªá" });
//         }

//         // C·∫≠p nh·∫≠t s·ªë d∆∞ trong t√†i kho·∫£n
//         await pool.request()
//             .input("user_id", sql.Int, user_id)
//             .input("new_balance", sql.Money, newBalance)
//             .query("UPDATE accounts SET balance = @new_balance WHERE user_id = @user_id");

//         // Th√™m v√†o b·∫£ng transactions
//         await pool.request()
//             .input("user_id", sql.Int, user_id)
//             .input("amount", sql.Money, amount)
//             .input("type", sql.VarChar, type)
//             .query(`
//                 INSERT INTO transactions (user_id, amount, type, created_at) 
//                 VALUES (@user_id, @amount, @type, GETDATE())
//             `);

//         res.json({ message: "Giao d·ªãch th√†nh c√¥ng", new_balance: newBalance });
//     } catch (error) {
//         console.error("‚ùå L·ªói t·∫°o giao d·ªãch:", error.message);
//         res.status(500).json({ error: `L·ªói t·∫°o giao d·ªãch: ${error.message}` });
//     }
// };





// module.exports = { getTransactions, addTransaction, createTransaction };


const { poolPromise, sql } = require("../connectDB");

// üìå L·∫•y danh s√°ch giao d·ªãch
const getTransactions = async(req, res) => {
    try {
        const pool = await poolPromise;
        const result = await pool.request().query(`
            SELECT transaction_id, user_id, type, amount, description, 
                   CONVERT(VARCHAR, created_at, 120) AS created_at 
            FROM transactions 
            ORDER BY created_at DESC
        `);
        res.json(result.recordset);
    } catch (err) {
        res.status(500).json({ error: "L·ªói l·∫•y danh s√°ch giao d·ªãch: " + err.message });
    }
};

// üìå Th√™m giao d·ªãch m·ªõi
const addTransaction = async(req, res) => {
    try {
        const { user_id, type, amount, description } = req.body;

        if (!user_id || !type || !amount) {
            return res.status(400).json({ error: "Thi·∫øu th√¥ng tin giao d·ªãch!" });
        }

        const pool = await poolPromise;

        // Ki·ªÉm tra t√†i kho·∫£n c√≥ t·ªìn t·∫°i kh√¥ng
        const checkUser = await pool.request()
            .input("user_id", sql.Int, user_id)
            .query("SELECT * FROM accounts WHERE user_id = @user_id");

        if (checkUser.recordset.length === 0) {
            return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n" });
        }

        // Th√™m giao d·ªãch v√†o database
        await pool.request()
            .input("user_id", sql.Int, user_id)
            .input("type", sql.NVarChar, type)
            .input("amount", sql.Decimal(18, 2), amount)
            .input("description", sql.NVarChar, description || "")
            .query(`
                INSERT INTO transactions (user_id, type, amount, description, created_at)
                VALUES (@user_id, @type, @amount, @description, GETDATE())
            `);

        res.json({ message: "‚úÖ Giao d·ªãch ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng!" });
    } catch (err) {
        res.status(500).json({ error: "L·ªói th√™m giao d·ªãch: " + err.message });
    }
};

// üìå T·∫°o giao d·ªãch (c√≥ c·∫≠p nh·∫≠t s·ªë d∆∞ t√†i kho·∫£n)
const createTransaction = async(req, res) => {
    try {
        const { user_id, amount, type } = req.body;

        if (!user_id || !amount || !type) {
            return res.status(400).json({ error: "Thi·∫øu d·ªØ li·ªáu ƒë·∫ßu v√†o!" });
        }

        const pool = await poolPromise;

        // Ki·ªÉm tra t√†i kho·∫£n c√≥ t·ªìn t·∫°i kh√¥ng
        const checkUser = await pool.request()
            .input("user_id", sql.Int, user_id)
            .query("SELECT balance FROM accounts WHERE user_id = @user_id");

        if (checkUser.recordset.length === 0) {
            return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n!" });
        }

        let newBalance = parseFloat(checkUser.recordset[0].balance);

        if (type === "deposit") {
            newBalance += parseFloat(amount);
        } else if (type === "withdraw") {
            if (newBalance < parseFloat(amount)) {
                return res.status(400).json({ error: "S·ªë d∆∞ kh√¥ng ƒë·ªß ƒë·ªÉ r√∫t!" });
            }
            newBalance -= parseFloat(amount);
        } else {
            return res.status(400).json({ error: "Lo·∫°i giao d·ªãch kh√¥ng h·ª£p l·ªá!" });
        }

        // C·∫≠p nh·∫≠t s·ªë d∆∞ trong t√†i kho·∫£n
        await pool.request()
            .input("user_id", sql.Int, user_id)
            .input("new_balance", sql.Decimal(18, 2), newBalance)
            .query("UPDATE accounts SET balance = @new_balance WHERE user_id = @user_id");

        // Th√™m giao d·ªãch v√†o b·∫£ng transactions
        await pool.request()
            .input("user_id", sql.Int, user_id)
            .input("amount", sql.Decimal(18, 2), amount)
            .input("type", sql.NVarChar, type)
            .query(`
                INSERT INTO transactions (user_id, amount, type, created_at) 
                VALUES (@user_id, @amount, @type, GETDATE())
            `);

        res.json({ message: "‚úÖ Giao d·ªãch th√†nh c√¥ng!", new_balance: newBalance });
    } catch (error) {
        console.error("‚ùå L·ªói t·∫°o giao d·ªãch:", error.message);
        res.status(500).json({ error: `L·ªói t·∫°o giao d·ªãch: ${error.message}` });
    }
};

module.exports = { getTransactions, addTransaction, createTransaction };